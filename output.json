[{"filePath":"/home/spkgdru/frontend-project-lvl2/__tests__/diffBuilder.test.js","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":4,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":4,"endColumn":5,"fix":{"range":[69,73],"text":"  "}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break after this opening brace.","line":4,"column":18,"nodeType":"ObjectExpression","messageId":"expectedLinebreakAfterOpeningBrace","fix":{"range":[87,87],"text":"\n"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break before this closing brace.","line":4,"column":49,"nodeType":"ObjectExpression","messageId":"expectedLinebreakBeforeClosingBrace","fix":{"range":[117,117],"text":"\n"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":5,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":5,"endColumn":5,"fix":{"range":[120,124],"text":"  "}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break after this opening brace.","line":5,"column":18,"nodeType":"ObjectExpression","messageId":"expectedLinebreakAfterOpeningBrace","fix":{"range":[138,138],"text":"\n"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break before this closing brace.","line":5,"column":52,"nodeType":"ObjectExpression","messageId":"expectedLinebreakBeforeClosingBrace","fix":{"range":[171,171],"text":"\n"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":6,"column":1,"nodeType":"Identifier","messageId":"wrongIndentation","endLine":6,"endColumn":5,"fix":{"range":[174,178],"text":"  "}},{"ruleId":"array-bracket-spacing","severity":2,"message":"There should be no space after '['.","line":6,"column":39,"nodeType":"ArrayExpression","messageId":"unexpectedSpaceAfter","endLine":6,"endColumn":40,"fix":{"range":[212,213],"text":""}},{"ruleId":"array-bracket-spacing","severity":2,"message":"There should be no space after '['.","line":6,"column":41,"nodeType":"ArrayExpression","messageId":"unexpectedSpaceAfter","endLine":6,"endColumn":42,"fix":{"range":[214,215],"text":""}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":6,"column":42,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":45,"fix":{"range":[215,218],"text":"'b'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":6,"column":63,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":66,"fix":{"range":[236,239],"text":"'c'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":6,"column":77,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":80,"fix":{"range":[250,253],"text":"'e'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":6,"column":91,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":94,"fix":{"range":[264,267],"text":"'f'"}},{"ruleId":"array-bracket-spacing","severity":2,"message":"There should be no space before ']'.","line":6,"column":110,"nodeType":"ArrayExpression","messageId":"unexpectedSpaceBefore","endLine":6,"endColumn":111,"fix":{"range":[283,284],"text":""}}],"errorCount":14,"warningCount":0,"fixableErrorCount":14,"fixableWarningCount":0,"source":"import diff from '../src/diffBuilder.js';\n\ntest('makeDiff1', () => {\n    const obj1 = { a: 1, b: 2, c: 3, d: 4, e: 5 };\n    const obj2 = { a: 1, c: 33, d: 4, e: 55, f: 66 };\n    expect(diff(obj1, obj2)).toEqual([ [ \"b\", 2, undefined], [\"c\", 3, 33], [\"e\", 5, 55], [\"f\", undefined, 66] ]);\n});\n","usedDeprecatedRules":[{"ruleId":"jest/no-try-expect","replacedBy":["no-conditional-expect"]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/home/spkgdru/frontend-project-lvl2/__tests__/parser.test.js","messages":[{"ruleId":"import/order","severity":2,"message":"`path` import should occur before import of `../src/parser.js`","line":2,"column":1,"nodeType":"ImportDeclaration","endLine":2,"endColumn":25,"fix":{"range":[0,64],"text":"import path from 'path';\nimport parser from '../src/parser.js';\n"}},{"ruleId":"no-underscore-dangle","severity":2,"message":"Unexpected dangling '_' in '__dirname'.","line":4,"column":7,"nodeType":"VariableDeclarator","messageId":"unexpectedUnderscore","endLine":4,"endColumn":66},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break after this opening brace.","line":7,"column":87,"nodeType":"ObjectExpression","messageId":"expectedLinebreakAfterOpeningBrace","fix":{"range":[243,243],"text":"\n"}},{"ruleId":"object-curly-newline","severity":2,"message":"Expected a line break before this closing brace.","line":7,"column":136,"nodeType":"ObjectExpression","messageId":"expectedLinebreakBeforeClosingBrace","fix":{"range":[291,291],"text":"\n"}}],"errorCount":4,"warningCount":0,"fixableErrorCount":3,"fixableWarningCount":0,"source":"import parser from '../src/parser.js';\nimport path from 'path';\n\nconst __dirname = path.dirname(new URL(import.meta.url).pathname);\n\ntest('parser', () => {\n  expect(parser(path.resolve(__dirname, '../__fixtures__/smallBefore.json'))).toEqual({ a: '1', b: '2', c: '3', d: '4', e: '5', f: '6' });\n});\n","usedDeprecatedRules":[{"ruleId":"jest/no-try-expect","replacedBy":["no-conditional-expect"]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/home/spkgdru/frontend-project-lvl2/bin/gendiff.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"jest/no-try-expect","replacedBy":["no-conditional-expect"]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/home/spkgdru/frontend-project-lvl2/index.js","messages":[{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":6,"column":2,"nodeType":"ExportDefaultDeclaration","messageId":"missingSemi","endLine":7,"endColumn":1,"fix":{"range":[170,170],"text":";"}}],"errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"import parser from './src/parser.js';\n\nexport default (filepath1, filepath2, format) => {\n  console.log(filepath1, filepath2, format);\n  console.log(parser(filepath1));\n}\n","usedDeprecatedRules":[{"ruleId":"jest/no-try-expect","replacedBy":["no-conditional-expect"]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/home/spkgdru/frontend-project-lvl2/src/diffBuilder.js","messages":[{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":2,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":2,"endColumn":5,"fix":{"range":[33,37],"text":"  "}},{"ruleId":"object-curly-spacing","severity":2,"message":"A space is required after '{'.","line":2,"column":33,"nodeType":"ObjectExpression","messageId":"requireSpaceAfter","endLine":2,"endColumn":34,"fix":{"range":[66,66],"text":" "}},{"ruleId":"object-curly-spacing","severity":2,"message":"A space is required before '}'.","line":2,"column":50,"nodeType":"ObjectExpression","messageId":"requireSpaceBefore","endLine":2,"endColumn":51,"fix":{"range":[82,82],"text":" "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":3,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":3,"endColumn":5,"fix":{"range":[86,90],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":4,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":4,"endColumn":9,"fix":{"range":[130,138],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 12.","line":5,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":5,"endColumn":13,"fix":{"range":[173,185],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":6,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":6,"endColumn":9,"fix":{"range":[237,245],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 8.","line":7,"column":1,"nodeType":"Keyword","messageId":"wrongIndentation","endLine":7,"endColumn":9,"fix":{"range":[247,255],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":8,"column":1,"nodeType":"Punctuator","messageId":"wrongIndentation","endLine":8,"endColumn":5,"fix":{"range":[267,271],"text":"  "}}],"errorCount":9,"warningCount":0,"fixableErrorCount":9,"fixableWarningCount":0,"source":"export default (obj1, obj2) => {\n    const allKeys = Object.keys({...obj1, ...obj2});\n    return allKeys.reduce((acc, value) => {\n        if (obj1[value] !== obj2[value]) {\n            return [...acc, [value, obj1[value], obj2[value]]];\n        }\n        return acc;\n    }, []);\n};\n","usedDeprecatedRules":[{"ruleId":"jest/no-try-expect","replacedBy":["no-conditional-expect"]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/home/spkgdru/frontend-project-lvl2/src/formatter.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Assigning to rvalue","line":1,"column":23}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const diffHandler = ( pName, oldP, newP ) = > {\n    if ( oldP && newP) return `${pName} was changed from ${oldP} to ${newP}`;\n    if (!oldP) return `${pName} was added with ${newP}`;\n    return `${pName} with ${oldP} was deleted`;\n}\n\nexport default (diff, format) => {  \n    if (diff.length === 0) return '';\n    return diffHandler(...diff)(format);\n}\n\n\n","usedDeprecatedRules":[{"ruleId":"jest/no-try-expect","replacedBy":["no-conditional-expect"]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]},{"filePath":"/home/spkgdru/frontend-project-lvl2/src/parser.js","messages":[{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":5,"column":3,"nodeType":"Literal","messageId":"wrongQuotes","endLine":5,"endColumn":9,"fix":{"range":[75,81],"text":"'.ini'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":6,"column":3,"nodeType":"Literal","messageId":"wrongQuotes","endLine":6,"endColumn":10,"fix":{"range":[101,108],"text":"'.json'"}},{"ruleId":"quotes","severity":2,"message":"Strings must use singlequote.","line":7,"column":3,"nodeType":"Literal","messageId":"wrongQuotes","endLine":7,"endColumn":9,"fix":{"range":[140,146],"text":"'.yml'"}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":7,"column":26,"nodeType":"Program","messageId":"trailingSpace","endLine":7,"endColumn":27,"fix":{"range":[163,164],"text":""}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":8,"column":2,"nodeType":"VariableDeclaration","messageId":"missingSemi","endLine":9,"endColumn":1,"fix":{"range":[166,166],"text":";"}},{"ruleId":"keyword-spacing","severity":2,"message":"Expected space(s) after \"default\".","line":10,"column":8,"nodeType":null,"messageId":"expectedAfter","fix":{"range":[182,182],"text":" "}},{"ruleId":"no-trailing-spaces","severity":2,"message":"Trailing spaces not allowed.","line":15,"column":46,"nodeType":"Program","messageId":"trailingSpace","endLine":15,"endColumn":48,"fix":{"range":[454,456],"text":""}},{"ruleId":"semi","severity":2,"message":"Missing semicolon.","line":16,"column":2,"nodeType":"ExportDefaultDeclaration","messageId":"missingSemi","endLine":17,"endColumn":1,"fix":{"range":[458,458],"text":";"}}],"errorCount":8,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":"import path from 'path';\nimport fs from 'fs';\n\nconst filetypeHandler = {\n  \".ini\": (data) => data,\n  \".json\": (data) => JSON.parse(data),\n  \".yml\": (data) => data, \n}\n\nexport default(filepath) => {\n  const filetype = path.extname(filepath);\n  if (!filetypeHandler[filetype]) return null;\n  const absolutePath = path.resolve(process.cwd(), filepath);\n  const fileData = fs.readFileSync(absolutePath, 'utf-8');\n  return filetypeHandler[filetype](fileData);  \n}\n","usedDeprecatedRules":[{"ruleId":"jest/no-try-expect","replacedBy":["no-conditional-expect"]},{"ruleId":"lines-around-directive","replacedBy":["padding-line-between-statements"]},{"ruleId":"no-spaced-func","replacedBy":["func-call-spacing"]},{"ruleId":"global-require","replacedBy":[]},{"ruleId":"no-buffer-constructor","replacedBy":[]},{"ruleId":"no-new-require","replacedBy":[]},{"ruleId":"no-path-concat","replacedBy":[]}]}]
